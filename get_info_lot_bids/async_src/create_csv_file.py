import time
import psycopg2
import csv
from selectolax.lexbor import LexborHTMLParser

from config import settings

# list_group_on_five = [[1987, 1986, 1985, 1984, 1983], [1982, 1980, 1979, 1978, 1977], [1976, 1975, 1974, 1972, 1970]]
list_group_on_five = [[1969, 1967, 1966, 1965, 1964], [1963, 1962, 1961, 1960, 1958], [1957, 1956, 1955, 1954, 1953],
                      [1952, 1951, 1950, 1948, 1947], [1946, 1945, 1944, 1943, 1942], [1941, 1940, 1939, 1937, 1936],
                      [1935, 1933, 1932, 1930, 1929], [1928, 1927, 1926, 1925, 1924], [1923, 1922, 1920, 1919, 1918],
                      [1917, 1916, 1914, 1913, 1912], [1911, 1909, 1908, 1907, 1906], [1905, 1904, 1903, 1902, 1900],
                      [1899, 1898, 1897, 1896, 1895], [1894, 1893, 1892, 1890, 1889], [1888, 1887, 1886, 1885, 1884],
                      [1883, 1882, 1881, 1880, 1878], [1877, 1876, 1875, 1874, 1873], [1872, 1870, 1869, 1868, 1867],
                      [1866, 1865, 1864, 1863, 1862], [1860, 1859, 1858, 1857, 1856], [1855, 1854, 1853, 1852, 1850],
                      [1849, 1848, 1847, 1846, 1845], [1844, 1842, 1841, 1840, 1839], [1838, 1837, 1836, 1835, 1834],
                      [1833, 1832, 1830, 1829, 1828], [1827, 1826, 1825, 1824, 1823], [1821, 1820, 1819, 1818, 1817],
                      [1815, 1814, 1813, 1812, 1811], [1810, 1809, 1808, 1807, 1806], [1804, 1803, 1802, 1801, 1800],
                      [1799, 1798, 1797, 1795, 1794], [1793, 1792, 1791, 1790, 1789], [1788, 1787, 1785, 1784, 1783],
                      [1782, 1781, 1780, 1779, 1778], [1777, 1775, 1774, 1773, 1772], [1771, 1770, 1769, 1768, 1766],
                      [1765, 1764, 1763, 1762, 1761], [1760, 1759, 1757, 1756, 1755], [1754, 1753, 1752, 1751, 1750],
                      [1749, 1748, 1747, 1745, 1744], [1743, 1742, 1741, 1740, 1739], [1738, 1736, 1735, 1734, 1733],
                      [1732, 1731, 1730, 1729, 1728], [1726, 1725, 1724, 1723, 1722], [1721, 1720, 1718, 1717, 1716],
                      [1715, 1714, 1713, 1712, 1711], [1710, 1708, 1707, 1706, 1705], [1704, 1703, 1702, 1700, 1699],
                      [1698, 1697, 1696, 1695, 1694], [1693, 1692, 1690, 1689, 1688], [1687, 1686, 1685, 1684, 1683],
                      [1682, 1680, 1679, 1678, 1677], [1676, 1675, 1674, 1673, 1672], [1670, 1669, 1668, 1667, 1666],
                      [1665, 1664, 1663, 1661, 1660], [1659, 1658, 1657, 1656, 1655], [1654, 1652, 1651, 1650, 1649],
                      [1648, 1647, 1646, 1645, 1644], [1643, 1641, 1640, 1639, 1638], [1637, 1636, 1635, 1634, 1632],
                      [1631, 1630, 1629, 1628, 1627], [1626, 1625, 1623, 1622, 1621], [1620, 1619, 1618, 1617, 1616],
                      [1615, 1614, 1613, 1611, 1610], [1609, 1608, 1607, 1606, 1605], [1603, 1602, 1601, 1600, 1599],
                      [1598, 1596, 1595, 1593, 1592], [1591, 1590, 1589, 1588, 1587], [1586, 1584, 1583, 1582, 1581],
                      [1580, 1579, 1578, 1577, 1575], [1574, 1573, 1572, 1571, 1570], [1569, 1568, 1567, 1566, 1564],
                      [1563, 1562, 1561, 1560, 1559], [1558, 1557, 1555, 1554, 1553], [1552, 1551, 1550, 1549, 1548],
                      [1547, 1545, 1544, 1543, 1542], [1541, 1540, 1539, 1538, 1537], [1535, 1534, 1533, 1532, 1531],
                      [1530, 1529, 1527, 1526, 1525], [1524, 1523, 1522, 1521, 1519], [1518, 1517, 1516, 1514, 1513],
                      [1512, 1511, 1510, 1509, 1507], [1506, 1505, 1504, 1503, 1502], [1501, 1500, 1498, 1497, 1496],
                      [1495, 1494, 1493, 1492, 1491], [1489, 1488, 1487, 1486, 1485], [1484, 1483, 1482, 1479, 1478],
                      [1477, 1476, 1475, 1474, 1473], [1472, 1470, 1469, 1468, 1467], [1466, 1465, 1464, 1463, 1461],
                      [1460, 1459, 1458, 1457, 1456], [1455, 1454, 1453, 1452, 1451], [1449, 1448, 1447, 1446, 1445],
                      [1444, 1443, 1441, 1440, 1439], [1438, 1437, 1436, 1434, 1433], [1432, 1431, 1429, 1428, 1427],
                      [1426, 1425, 1424, 1421, 1420], [1419, 1417, 1416, 1415, 1414], [1413, 1412, 1411, 1410, 1409],
                      [1406, 1405, 1402, 1401, 1400], [1399, 1398, 1397, 1396, 1394], [1393, 1392, 1391, 1390, 1389],
                      [1388, 1386, 1385, 1384, 1383], [1382, 1381, 1380, 1379, 1378], [1376, 1375, 1374, 1373, 1372],
                      [1371, 1370, 1369, 1367, 1366], [1365, 1364, 1363, 1362, 1361], [1359, 1358, 1356, 1355, 1352],
                      [1351, 1350, 1348, 1347, 1346], [1345, 1344, 1343, 1342, 1341], [1340, 1339, 1337, 1336, 1335],
                      [1334, 1333, 1332, 1331, 1329], [1328, 1327, 1326, 1325, 1324], [1323, 1322, 1320, 1319, 1318],
                      [1317, 1315, 1313, 1312, 1311], [1310, 1309, 1307, 1306, 1305], [1304, 1303, 1302, 1301, 1300],
                      [1298, 1297, 1296, 1295, 1294], [1293, 1292, 1291, 1290, 1288], [1287, 1286, 1285, 1284, 1283],
                      [1282, 1281, 1280, 1278, 1277], [1276, 1275, 1274, 1273, 1272], [1271, 1270, 1269, 1267, 1266],
                      [1265, 1264, 1263, 1262, 1261], [1260, 1259, 1258, 1256, 1255], [1254, 1253, 1252, 1251, 1250],
                      [1249, 1247, 1246, 1245, 1244], [1243, 1241, 1240, 1238, 1237], [1236, 1235, 1234, 1233, 1232],
                      [1231, 1229, 1228, 1227, 1226], [1225, 1224, 1223, 1222, 1221], [1219, 1218, 1217, 1216, 1215],
                      [1214, 1213, 1211, 1210, 1209], [1208, 1207, 1206, 1205, 1204], [1203, 1201, 1200, 1199, 1198],
                      [1197, 1195, 1194, 1193, 1192], [1191, 1190, 1188, 1187, 1186], [1185, 1184, 1183, 1182, 1181],
                      [1179, 1178, 1177, 1176, 1175], [1174, 1173, 1172, 1171, 1170], [1167, 1166, 1165, 1164, 1163],
                      [1162, 1159, 1158, 1157, 1156], [1155, 1153, 1152, 1151, 1150], [1148, 1146, 1145, 1143, 1142],
                      [1139, 1138, 1137, 1136, 1134], [1133, 1132, 1131, 1130, 1129], [1128, 1127, 1125, 1124, 1123],
                      [1122, 1121, 1120, 1119, 1117], [1115, 1114, 1113, 1112, 1111], [1110, 1109, 1108, 1107, 1106],
                      [1104, 1103, 1101, 1100, 1099], [1098, 1097, 1096, 1095, 1094], [1092, 1091, 1090, 1089, 1088],
                      [1087, 1085, 1084, 1083, 1082], [1081, 1080, 1079, 1078, 1077], [1076, 1074, 1073, 1072, 1071],
                      [1070, 1069, 1068, 1067, 1065], [1064, 1063, 1062, 1061, 1060], [1057, 1056, 1054, 1053, 1052],
                      [1051, 1050, 1049, 1048, 1047], [1046, 1045, 1044, 1043, 1041], [1040, 1039, 1038, 1037, 1036],
                      [1035, 1034, 1032, 1031, 1030], [1029, 1028, 1027, 1026, 1024], [1023, 1022, 1021, 1020, 1019],
                      [1018, 1017, 1016, 1015, 1013], [1012, 1011, 1010, 1009, 1008], [1007, 1005, 1004, 1003, 1002],
                      [1001, 1000, 999, 998, 997], [996, 994, 993, 992, 991], [990, 989, 987, 986, 984],
                      [983, 982, 981, 980, 979], [978, 977, 975, 974, 970], [969, 968, 967, 966, 965],
                      [963, 962, 961, 960, 959], [958, 957, 956, 955, 954], [952, 951, 950, 949, 948],
                      [947, 944, 943, 942, 941], [940, 939, 938, 937, 936], [935, 932, 931, 930, 929],
                      [928, 927, 926, 925, 924], [923, 921, 920, 919, 918], [917, 916, 915, 913, 912],
                      [911, 910, 909, 908, 907], [906, 905, 903, 902, 901], [900, 899, 898, 896, 895],
                      [894, 893, 891, 890, 888], [887, 886, 885, 883, 882], [881, 880, 879, 878, 877],
                      [876, 874, 873, 872, 871], [870, 869, 868, 867, 865], [864, 863, 861, 860, 859],
                      [858, 857, 856, 854, 853], [852, 851, 850, 849, 848], [845, 844, 842, 841, 840],
                      [839, 838, 837, 836, 835], [833, 832, 830, 829, 828], [827, 826, 825, 824, 823],
                      [821, 820, 819, 818, 817], [816, 815, 814, 812, 811], [810, 809, 808, 807, 806],
                      [805, 803, 802, 801, 800], [799, 798, 797, 796, 795], [794, 789, 788, 787, 786],
                      [783, 782, 781, 780, 778], [777, 776, 775, 774, 773], [772, 771, 769, 768, 767],
                      [766, 765, 764, 763, 762], [759, 758, 757, 756, 755], [754, 753, 752, 750, 749],
                      [748, 747, 746, 745, 744], [743, 741, 740, 739, 738], [737, 736, 735, 734, 732],
                      [731, 730, 729, 728, 727], [726, 725, 724, 723, 721], [720, 719, 718, 717, 716],
                      [715, 711, 710, 709, 703], [701, 700, 699, 698, 697], [696, 695, 694, 692, 691],
                      [690, 689, 688, 687, 686], [684, 683, 682, 681, 680], [679, 678, 677, 675, 674],
                      [673, 672, 671, 670, 669], [668, 667, 666, 665, 664], [663, 662, 660, 659, 658],
                      [657, 656, 655, 654, 653], [652, 651, 649, 648, 646], [645, 644, 643, 642, 641],
                      [640, 639, 637, 636, 635], [634, 633, 632, 631, 630], [628, 627, 626, 625, 624],
                      [623, 622, 621, 619, 618], [617, 616, 615, 614, 613], [612, 611, 610, 608, 606],
                      [605, 604, 603, 602, 601], [600, 598, 597, 595, 591], [590, 589, 588, 587, 585],
                      [584, 583, 582, 580, 578], [577, 576, 575, 574, 572], [569, 568, 567, 566, 565],
                      [564, 563, 561, 560, 559], [558, 557, 556, 554, 553], [551, 550, 549, 547, 546],
                      [545, 544, 543, 542, 541], [539, 538, 537, 536, 535], [534, 533, 532, 530, 529],
                      [528, 527, 526, 525, 524], [523, 522, 521, 519, 518], [517, 516, 515, 514, 513],
                      [512, 510, 509, 508, 507], [506, 505, 504, 503, 502], [501, 499, 498, 497, 496],
                      [495, 494, 492, 491, 490], [486, 485, 484, 482, 479], [478, 477, 473, 472, 471],
                      [470, 469, 468, 467, 466], [460, 459, 458, 457, 456], [455, 454, 453, 450, 449],
                      [448, 447, 446, 445, 444], [443, 440, 439, 437, 436], [435, 434, 433, 432, 431],
                      [430, 428, 427, 426, 425], [424, 423, 422, 421, 420], [419, 417, 416, 414, 413],
                      [412, 411, 410, 409, 407], [404, 403, 402, 401, 400], [399, 398, 395, 394, 393],
                      [392, 391, 390, 389, 388], [387, 386, 382, 381, 380], [379, 378, 377, 375, 374],
                      [373, 370, 369, 368, 367], [366, 365, 364, 361, 360], [359, 358, 357, 356, 354],
                      [353, 352, 351, 350, 349], [348, 346, 343, 342, 341], [340, 339, 338, 337, 336],
                      [334, 333, 332, 331, 330], [329, 328, 327, 326, 325], [323, 322, 321, 320, 319],
                      [318, 317, 316, 314, 313], [312, 311, 310, 309, 308], [307, 305, 304, 302, 301],
                      [300, 299, 298, 297, 296], [295, 294, 292, 291, 290], [289, 288, 287, 286, 285],
                      [284, 282, 281, 273, 271], [270, 269, 268, 267, 266], [265, 263, 262, 261, 260],
                      [259, 258, 257, 255, 254], [253, 250, 249, 248, 246], [245, 244, 243, 242, 240],
                      [239, 238, 236, 235, 234], [233, 232, 230, 229, 228], [227, 226, 224, 223, 222],
                      [221, 219, 218, 217, 216], [214, 212, 211, 210, 209], [207, 206, 205, 204, 202],
                      [201, 200, 199, 198, 196], [195, 194, 193, 191, 190], [189, 188, 187, 185, 184],
                      [183, 181, 180, 179, 178], [177, 175, 174, 173, 172], [171, 169, 168, 167, 166],
                      [158, 157, 156, 155, 153], [152, 151, 150, 148, 144], [143, 142, 140, 139, 138],
                      [137, 135, 134, 133, 132], [131, 129, 128, 127, 125], [123, 122, 121, 120, 118],
                      [117, 116, 115, 113, 112], [111, 110, 108, 106, 105], [103, 102, 101, 99, 98],
                      [97, 95, 94, 93, 92], [90, 89, 88, 84, 83], [82, 81, 79, 78, 77], [76, 75, 74, 73, 72],
                      [70, 69, 68, 67, 66], [64, 63, 62, 61, 55], [54, 53, 52, 51, 50], [49, 46, 45, 44, 43],
                      [42, 40, 39, 38, 37], [36, 35, 34, 33, 32], [31]]

count = 0


# утратила свою полезность
def swap_in_list(list_value, a, b):
    tmp_a = list_value[a]
    list_value[a] = list_value[b]
    list_value[b] = tmp_a
    return list_value


def write_in_csv(data) -> None:
    """
    Запись в csv файл из бд postgresql
    :param data: TODO: дополнить данные
    :return: None
    """
    with open('bids_csv.csv', 'a', newline='') as filename:
        write_filename = csv.writer(filename, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        # column_names = ['id', 'id_hidden_auction', 'id_hidden_lot', 'amount_bid', 'nickname', 'datetime_pay', 'status']
        # write_filename.writerow(column_names)
        for bid in data:
            list_value = list(bid.values())
            write_filename.writerow(list_value)


def parser_selectolax(data):
    """
    Быстрый парсер. Быстрее используемого ранее BeatifualSoup4. У меня вышла разница в 14 раз
    :param data: html страницы находиться пример по адресу get_info_lot_bids/data/lot1.html
    :return: TODO: дополнить данные
    """
    global count
    parser = LexborHTMLParser(data)
    try:
        table = parser.css_first('table')
        rows = [[td.text() for td in tr.css('td')] for tr in table.css('tr')[1:]]

        status_choise = {'first': 'first', 'inter': 'inter', 'final': 'final'}
        table_values = []
        count_number_buyer = 0
        all_records_in_list = len(rows)
        for row in rows:
            amount_bid = str(int(row[0].replace(' ', '')))
            nickname = row[2]
            datetime_pay = row[3]
            res = {'amount_bid': amount_bid, 'nickname': nickname, 'datetime_pay': datetime_pay}
            if (all_records_in_list - count_number_buyer) == all_records_in_list:
                res['status'] = status_choise['final']
            elif (all_records_in_list - 1) == count_number_buyer:
                res['status'] = status_choise['first']
            else:
                res['status'] = status_choise['inter']
            table_values.append(res)
            count_number_buyer += 1
        return table_values
    except Exception as e:
        count += 1
        print(count)
        return None


def get_data_in_db(a, b):
    """
    Получение данных из бд postgresql ввиде списка
    :return: TODO: дополнить данные
    """
    conn = psycopg2.connect(dbname=settings.POSTGRES_DB, user=settings.POSTGRES_USER,
                            password=settings.POSTGRES_PASSWORD, host=settings.POSTGRES_SERVER)

    cursor = conn.cursor()
    # cursor.execute(f'select * from {settings.NAME_TABLE_HTML};')
    # cursor.execute(f'-- SELECT * FROM {settings.NAME_TABLE_HTML} WHERE id_auction_hidden BETWEEN 1478 AND 1484;')
    # cursor.execute(f'SELECT * FROM {settings.NAME_TABLE_HTML} WHERE id_auction_hidden=1438;')
    # cursor.execute(f'-- SELECT * FROM html_str_2 WHERE id_auction_hidden BETWEEN 1294 AND 1298;')
    # cursor.execute(f'-- SELECT * FROM html_str_2 WHERE id_auction_hidden=1053;')
    cursor.execute(
        f'SELECT  * FROM html_test_final WHERE id_auction_hidden BETWEEN {a} AND {b} ORDER BY id_lot_hidden DESC;')
    # cursor.execute(f'-- SELECT * FROM html_str_3 WHERE id_lot_hidden=1718470;')
    list_data = []
    for row in cursor:
        list_data.append(row)
    # print(list_data)
    cursor.close()
    conn.close()
    return list_data


def main():
    st_ti = time.time()
    index_a = 0
    index_b = 100
    list_step = list_group_on_five[:]
    for step in list_step:
        start_time = time.time()
        data = get_data_in_db(a=step[-1], b=step[0])
        list_clear_data = []
        for html_str in data:
            clear_data = parser_selectolax(html_str[1])  # 10000 записей за 1.920641422271728
            if clear_data is not None:
                for number_index in range(len(clear_data)):
                    # ord_dict = OrderedDict(clear_data[number_index])
                    list_clear_data_str = list(
                        clear_data[number_index].items())  # получение ключа и значений ввиде пар кортежей ввиде списка
                    list_clear_data_str.insert(0, (
                        'id_hidden_lot', str(html_str[2])))  # меняем места для более красивого отображения данных в csv
                    list_clear_data_str.insert(0, ('id_hidden_auction', str(html_str[3])))
                    list_clear_data_str.insert(0, ('id', str(html_str[0])))
                    list_clear_data.append(dict(list_clear_data_str))

        write_in_csv(list_clear_data)
        print(f"Записано {step}")
        finish_time = time.time() - start_time
        print(f"Затраченное на работу скрипта время: {finish_time}")
    print(time.time() - st_ti) # 1623 сек на все


if __name__ == "__main__":
    main()
